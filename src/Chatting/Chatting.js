import style from './Chatting.module.css';
import user from './user.png';
import hand from './hand.png';
import send from './send.png';
import { useRef, useState, useEffect, useCallback } from 'react';
import * as StompJs from '@stomp/stompjs';
import axios from 'axios';
import { useHistory } from 'react-router';
import { Link } from 'react-router-dom';
import Doing from '../Doing/Doing';
import Swal from "sweetalert2";
import { Icon } from '@iconify/react';

const Chatting = ({ match }) => {

    const client = useRef({});
    const [chatList, setChatList] = useState([]); // Ï∞∏Ïó¨ Ï§ëÏù∏ Ï±ÑÌåÖÎ∞© Î™©Î°ù
    const [sender, setSender] = useState(''); // Î°úÍ∑∏Ïù∏Îêú Ïú†Ï†Ä ID
    const [message, setMessage] = useState([]);
    const [chat, setChat] = useState('');
    const [roomIdx, setRoomIdx] = useState('');
    const [receiver, setReceiver] = useState(''); // ÌòÑÏû¨ Ï±ÑÌåÖ ÏÉÅÎåÄ
    const [users, setUsers] = useState([]);
    const [receiverImg, setReceiverImg] = useState(''); // userId ‚Üí ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ Îßµ // Î∞∞Ïó¥ -> Î¨∏ÏûêÏó¥Î°ú Ï¥àÍ∏∞Ìôî
    const [receiverImgs, setReceiverImgs] = useState({}); // userId ‚Üí profileImg map
    const [isClient, setIsClient] = useState(false);

    // sender:
    // Î°úÍ∑∏Ïù∏Îêú ÎÇ¥ ÏïÑÏù¥Îîî (ÏÑ∏ÏÖò Í∏∞Î∞òÏúºÎ°ú /api/chatroomÏóêÏÑú Î∞õÏïÑÏò¥)

    // receiver:
    // Ï±ÑÌåÖÎ∞© ÌÅ¥Î¶≠ Ïãú ÏÉÅÎåÄÎ∞© Ïú†Ï†Ä ÏïÑÏù¥Îîî (Ï¶â, userId1 === senderÏù¥Î©¥ ÏÉÅÎåÄÎäî userId2, Î∞òÎåÄÎèÑ ÎßàÏ∞¨Í∞ÄÏßÄ)

    // receiverImgs:
    // userIdÎ•º keyÎ°ú Í∞ñÎäî Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Îßµ
    // Ïòà: { 'user123': 'img123abc', 'user456': 'img456xyz' }

    const history = useHistory();

    const publish = () => {
        if (!client.current.connected) return;
        client.current.publish({
            destination: '/pub/chat/message',
            body: JSON.stringify({
                roomIdx: roomIdx,
                data: chat,
                writer: sender
            }),
        });
        setChat('');
    };

    const connect = () => {
        client.current = new StompJs.Client({
            brokerURL: `ws://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/ws`,
            onConnect: () => {
                console.log('success');
            },
        });
        client.current.activate();
    };

    useEffect(() => {
        const token = sessionStorage.getItem('token');

        console.log("üì¶ Chatting ÏßÑÏûÖ Ïãú Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞:", token);

        if (!token || token === "null" || token === "undefined") {
        // if (sessionStorage.getItem('token') == null) {

            Swal.fire({
                icon: 'error',
                title: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.',
                text: 'Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.',
            });
            history.push('/login')
            return;
        }

        connect();
        /* Ï±ÑÌåÖÎ∞© Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ */
        axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/chatroom`, {
            // headers: { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` }
            headers: { 'Authorization': `Bearer ${token}` }
        })
            .then(r => {
                setChatList(Array.isArray(r.data.chatting) ? r.data.chatting : []);
                setSender(r.data.sender);  
                // ‚Üë Ïù¥ Îã®Í≥ÑÏóêÏÑú Ïñ¥Îñ§ Ï±ÑÌåÖÎ∞©Îì§Ïù¥ ÎÇòÎûë Í¥ÄÎ†® ÏûàÎäîÏßÄ, Í∑∏Î¶¨Í≥† ÎÇ¥ Ïó≠Ìï†Ïù¥ userId1Ïù∏ÏßÄ userId2Ïù∏ÏßÄ ÌååÏïÖ Í∞ÄÎä•
                sessionStorage.setItem("lastRoomIdx", r.data.chatting[0]?.roomIdx); // ÏïàÏ†ÑÌïòÍ≤å ÎÑ£Í∏∞
                // const lastRoomIdx = sessionStorage.getItem("lastRoomIdx");
            })
             .catch(e => {
            // ‚ùó Ïù∏Ï¶ù Ïò§Î•ò Î∞úÏÉù Ïãú Í∞ïÏ†ú Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
            if (e.response?.status === 401 || e.response?.data?.message?.includes("Ïù∏Ï¶ù")) {
                Swal.fire({
                    icon: 'error',
                    title: 'ÏÑ∏ÏÖò ÎßåÎ£å',
                    text: 'Îã§Ïãú Î°úÍ∑∏Ïù∏ Ìï¥Ï£ºÏÑ∏Ïöî.',
                });
                sessionStorage.clear();
                history.push('/login');
            }
        });
    }, []);

    useEffect(() => {
        if (sender && chatList.length > 0) {
            const lastRoomIdx = sessionStorage.getItem("lastRoomIdx") || chatList[0].roomIdx;
            chatroom(parseInt(lastRoomIdx), sender);
        }
    }, [sender, chatList]);

    useEffect(() => {
        if (!sender || chatList.length === 0) return;

        // setUsers([]); 
        // setReceiverImgs({}); // üîÅ Î°úÍ∑∏Ïù∏ Ïãú Ï¥àÍ∏∞Ìôî

        /* ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ï†Ñ Î°úÎî© 
        ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Îêú senderÏôÄ Î∞òÎåÄÌé∏ Ïú†Ï†ÄÎ•º Ï∞æÏïÑ targetId ÏÑ§Ï†ï
        Ïù¥Î•º ÌÜµÌï¥ Ï±ÑÌåÖ Î™©Î°ùÏóê Î≥¥Ïùº ÏÉÅÎåÄÎ∞© ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ preload
        */
        
        chatList.forEach(list => {
            const targetId = list.userId1 === sender ? list.userId2 : list.userId1;

            axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/profile/${targetId}`)
                .then(r => {
                    const profileData = r.data.profile[0];
                    if (profileData) {
                    setUsers((prev) => [...prev, profileData]);
                    setReceiverImgs((prevImgs) => ({
                    ...prevImgs,
                    [targetId]: profileData.profileImg || 'defaultImg',
                    }));
                 }
               });
             });
    }, [chatList, sender]);

    const chatroom = (props, senderId = sender) => {
        setReceiverImg(''); // üëà Ïù¥ÎØ∏ÏßÄ Ï¥àÍ∏∞Ìôî
        sessionStorage.setItem("lastRoomIdx", props);

        axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/chat/${props}`)
            .then(response => {
                console.log("üí¨ Chatroom response", response.data); 
                setMessage(response.data.messagelist);
                setRoomIdx(response.data.chatting.roomIdx);
                subscribe(response.data.chatting.roomIdx);

                if (senderId === response.data.chatting.userId1) {
                    setReceiver(response.data.chatting.userId2); // Ï±ÑÌåÖÎ∞© ÌÅ¥Î¶≠ Ïãú (chatroom() Ìò∏Ï∂ú -- axios.get(`/api/profile/${ÏÉÅÎåÄÎ∞© userId}`) ‚Üí setReceiverImg
                    setIsClient(false); // ‚ùå producerÎäî client ÏïÑÎãò
                    axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/profile/${response.data.chatting.userId2}`) //Ïó¨Í∏∞ÏÑúÎäî Ïã§Ï†ú Ï±ÑÌåÖÎ∞© Î©îÏãúÏßÄ + ÏÉÅÎåÄÎ∞© Ïù¥ÎØ∏ÏßÄ Ìò∏Ï∂ú 
                    // Îã®Ïùº Ïù¥ÎØ∏ÏßÄÎßå Ïì∞Í∏∞ ÎïåÎ¨∏Ïóê receiverImgÎùºÎäî Î≥ÑÎèÑ ÏÉÅÌÉúÏóê Ï†ÄÏû•
                        .then((r) => { setReceiverImg(r.data.profile[0].profileImg); });
                } else if (senderId === response.data.chatting.userId2){
                    setReceiver(response.data.chatting.userId1);
                    setIsClient(true); // ‚úÖ clientÏùº ÎïåÎßå true
                    axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/profile/${response.data.chatting.userId1}`)
                        .then((r) => { setReceiverImg(r.data.profile[0].profileImg); });
                }
            })
            .catch(error => {
                console.log(error);
            });
    };

    function subscribe(roomIdx) {
        client.current.subscribe('/sub/channel/' + roomIdx, recive);
    }

    const recive = useCallback((body) => {
        const json_body = JSON.parse(body.body);
        setMessage(message => [
            ...message,
            { roomIdx: json_body.roomIdx, data: json_body.data, writer: json_body.writer }
        ]);

        setChatList(prevList =>
            prevList.map(chat =>
                chat.roomIdx === json_body.roomIdx
                    ? { ...chat, lastMessage: json_body.data }
                    : chat
            )
        );
    }, []);

    const handleHand = () => {
        axios.post(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/insertCommission/${receiver}`, {
            "userId1": sender,
            "userId2": receiver
        })
            .then(r => {
                history.push(`/partner/doing`);
            })
            .catch(e => { console.log(e) });
    };

    return (
        <>
            <div className='container clearfix'>
                <div className={style.mainBox}>
                    <div className={style.chatListBox}>
                        <div className={style.chatListText}>Ï±ÑÌåÖ Î™©Î°ù</div>
                        <div className={style.chatListProfile}>
                            {chatList.map(list => {
                                let receiver;
                                if (list.userId1 === sender) receiver = list.userId2;
                                else if (list.userId2 === sender) receiver = list.userId1;

                                // const userProfile = users.find(user => user.userId === receiver);
                                // console.log("üß† userProfile:", userProfile);
                                /* Ï±ÑÌåÖ Î™©Î°ù */
                                const profileImg = receiverImgs[receiver] || 'defaultImg';
                                return (
                                    <div key={list.roomIdx} className={style.profile} onClick={() => chatroom(list.roomIdx)}>
                                        <div className={style.profileImg}>
                                            <img 
                                                src={`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/getImage/${profileImg}.jpg`}
                                                 onError={(e) => { e.target.src = '/default-profile.png'; }} // fallback
                                                className={style.profileIcon}
                                                alt="ÌîÑÎ°úÌïÑ"
                                            />
                                        </div>
                                        <div className={style.profileContent}>
                                            <div className={style.profileName}>{receiver}</div>
                                            <div className={style.shortChat}>
                                                {list.lastMessage || "ÎåÄÌôîÍ∞Ä ÏóÜÏäµÎãàÎã§. Ï±ÑÌåÖÏùÑ ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî"}
                                            </div>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                    <div className={style.chatBox}>
                        <div className={style.topText}>
              
                                <div className={style.receiver}> 
                                    <img src={`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/getImage/${receiverImg}.jpg`} //Ï±ÑÌåÖÎ∞© ÏÉÅÎã® Ïù¥ÎØ∏ÏßÄ
                                        className={style.chatProfile} alt="ÌîÑÎ°úÌïÑ" />
                                </div>
                          
                            <div className={style.chatName}>{receiver}</div>
                        </div>
                        <div className={style.chat}>
                            <div className={style.chatbox}>
                                {message.map((d, index) => {
                                    console.log("üì® Î©îÏãúÏßÄ:", d.data, "Î≥¥ÎÇ∏ÏÇ¨Îûå:", d.writer, "ÎÇò:", sender);
                                    
                                    return d.writer === sender ? (
                                         <div key={index} className={style.chatContent1}><p>{d.data}</p></div>
                                    ) : (
                                        d.writer != null ? (
                                            <div key={d.messageIdx} className={style.chatContent4}><p>{d.data}</p></div>
                                        ) : null
                                    );
                                })}
                            </div>
                            <div className={style.chatFoot}>
                                <input
                                    type="text"
                                    onChange={(e) => setChat(e.target.value)}
                                    value={chat}
                                    className={style.chatInput}
                                />
                                <button className={style.handButton} onClick={handleHand}
                                style={{ visibility: isClient ? 'visible' : 'hidden' }} >
                                    <Icon icon="la:handshake" color="#aaa" width="24" />
                                </button>
                                <button className={style.sendButton} onClick={publish}>
                                    <Icon icon="mingcute:send-fill" color="#fcfcfc" width="24" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

export default Chatting;

// chatList, senderÍ∞Ä setÎêòÍ∏∞ Ï†ÑÏóê useEffectÍ∞Ä Î®ºÏ†Ä Ïã§ÌñâÎêòÎäî Î∞îÎûåÏóê userId1 or 2Ïùò ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌïòÎäî(undefined) ÌòÑÏÉÅÏù¥ Î∞úÏÉù
// + ÏûòÎ™ªÎêú API ÏöîÏ≤≠Ïù¥ Î∞òÎ≥µÎêòÍ±∞ÎÇò receiverImgsÍ∞Ä Îã§Î•∏ Í≤ÉÎì§Î°ú Ï±ÑÏõåÏßÄÍ∏∞ÎèÑ
// useEffect(() => {}, [chatList]) ÎÇ¥Î∂ÄÏóêÏÑú setUsers([]), setReceiverImgs({})Î°ú Îß§Î≤à ÏÉÅÌÉúÎ•º Ï¥àÍ∏∞Ìôî ‚Üí Ïù¥ÌõÑ setState Î¨¥Ìïú Î£®ÌîÑÎèåÏïÑ ÍπúÎπ°Í±∞Î¶¨Îäî Ïù¥Ïäà
// -- chatroom() Ìò∏Ï∂úÏù¥ ÎÑàÎ¨¥ Îπ®ÎùºÏÑú receiverImgsÍ∞Ä ÏÑ∏ÌåÖÎêòÍ∏∞ÎèÑ Ï†ÑÏóê UIÍ∞Ä Îã§Ïãú Î†åÎçîÎê® ‚Üí ÏóëÎ∞ï Îú®Îäî Î¨∏Ï†ú

// Ï±ÑÌåÖÌéòÏù¥ÏßÄ Îì§Ïñ¥Í∞à Îïå Íº≠ Ï±ÑÌåÖÎ™©Î°ùÏóêÏÑú Ï±ÑÌåÖÏùÑ ÏÑ†ÌÉùÌïòÏßÄ ÏïäÎçîÎùºÎèÑ ÎßàÏßÄÎßâ ÎåÄÌôîÌïú ÏÉÅÎåÄÎ∞©Ïùò Ï±ÑÌåÖÎ∞©Í≥º Í∑∏ ÎåÄÌôîÎÇ¥Ïö©Ïù¥ Î∂àÎ†§ÏôÄÏ°åÏúºÎ©¥ Ìï®
// -> Ïù¥Í≥≥Ï†ÄÍ≥≥ ÏΩîÎìú Í≥†ÏπòÎã§Î≥¥Îãà Íº¨Ïó¨Î≤ÑÎ†§ ÏõêÎûòÎåÄÎ°ú ÎèåÎ†§ÎèÑ ÎûòÌåÖÎ™©Î°ùÏùò ÏÉÅÎåÄÎ∞© ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄÍ∞Ä Ïïà Î≥¥Ïù¥Îäî ÌòÑÏÉÅ + ÎåÄÌôîÏ§ëÏù∏ Îëê Í≥ÑÏ†ï Ï§ë Ìïú Í≥ÑÏ†ïÏóêÏÑúÎßå Ï†úÎåÄÎ°ú Î≥¥Ïù¥Í≥† Îã§Î•∏ Ìïú Í≥ÑÏ†ïÏóêÏÑ† ÎåÄÌôîÎ™©Î°ùÏùò ÏÉÅÎåÄÎ∞© ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄÍ∞Ä Ïïà Î≥¥Ïù¥Îäî Ïù¥Ïäà Î∞úÏÉù
// -> ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ÏãúÏ†ê, useEffect ÌÉÄÏù¥Î∞çÏù¥ Íº¨ÏûÑ 
// ÏõêÏù∏ -- chatList, senderÍ∞Ä ÎπÑÏñ¥ ÏûàÎäî ÏãúÏ†êÏóê useEffectÍ∞Ä Ïã§Ìñâ > targetIdÍ∞Ä undefinedÏù∏ ÏÉÅÌÉúÎ°ú /api/profile/undefined ÏöîÏ≤≠Ïù¥ Î∞úÏÉù
// Ìï¥Í≤∞ -- setReceiverImgs({}); Ïù¥ ÏΩîÎìúÍ∞Ä useEffect([chatList, sender]) ÎÇ¥Î∂ÄÏóê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏñ¥ÏÑú receiverImgsÍ∞Ä Îß§Î≤à Ï¥àÍ∏∞Ìôî ‚Üí Ïù¥ÎØ∏ÏßÄÍ∞Ä Îú®Í∏∞ÎèÑ Ï†ÑÏóê ÏÇ¨ÎùºÏßê
// receiverImgÎäî Ìïú Î≤àÎßå ÏÑ§Ï†ïÌï¥Ïïº ÌïòÎäîÎç∞ chatroom()Ïù¥ ÏûêÏ£º Ìò∏Ï∂úÏãúÏºú Í≥ÑÏÜç Í∞±Ïã†Îê® ‚Üí ÍπúÎπ°ÏûÑ ÌòÑÏÉÅ

// receiverImgs Ï¥àÍ∏∞Ìôî ÏúÑÏπò Î¨∏Ï†ú -> Î°úÍ∑∏Ïù∏ ÏßÅÌõÑ 1ÌöåÎßå Ï¥àÍ∏∞Ìôî, Ïù¥ÌõÑÏóî Ïú†ÏßÄ -- 
// receiverÏùò ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï Ï§ëÎ≥µ -> receiverImgsÎùºÎäî Ï†ÑÏ≤¥ Îßµ Íµ¨Ï°∞Î°ú ÌÜµÏùºÌïòÍ≥†, receiverImgÎäî Ï±ÑÌåÖÎ∞© ÏÉÅÎã®Îßå Îã¥Îãπ --Ïù¥ÎØ∏ÏßÄ fallback Ï≤òÎ¶¨
// useEffect Ïã§Ìñâ ÏàúÏÑú -> sender && chatList.length > 0 Ï°∞Í±¥ÏúºÎ°ú Î≥¥Ìò∏
// Î¨¥Ìïú ÍπúÎπ°ÏûÑ -> setState Î£®ÌîÑ Ï†úÍ±∞ Î∞è chatroom() Î∞òÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
// undefined ÎåÄÏÉÅ API ÏöîÏ≤≠ -> userId1, userId2 ÎπÑÍµêÏóêÏÑú Î™ÖÌôïÌûà targetId set

// Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ∏ÌåÖÍ≥º ÎπÑÎèôÍ∏∞ ÏöîÏ≤≠Ïùò ÏàúÏÑú Íº¨ÏûÑÏúºÎ°ú Ïù∏Ìï¥ undefinedÏóê ÎåÄÌïú API Ìò∏Ï∂ú 
// ÏÉÅÌÉúÏùò Î∞òÎ≥µ Ï¥àÍ∏∞Ìôî
// Ïù¥ÎØ∏ÏßÄ Î∂àÏùºÏπò/ÍπúÎπ°ÏûÑ ÌòÑÏÉÅ Îì±Ïù¥ Î∞úÏÉù -> ÏÉÅÌÉú Î∂ÑÎ¶¨ Î∞è Ï°∞Í±¥Î∂Ä Ïã§ÌñâÏúºÎ°ú Ìï¥Í≤∞

// isClient ÏÉÅÌÉúÎ•º Ï∂îÍ∞ÄÌï¥ÏÑú chatroom() Ïóê profileImg Î∂àÎü¨Ïò§Î†§ set Ìï† Îïå Í∑∏ Î∞ëÏóê true/ false ÏÑ§Ï†ï
// > Ïù¥ Î∞©Î≤ïÏúºÎ°ú clientÏùò Ï±ÑÌåÖÏ∞ΩÏóêÏÑúÎßå ÌòëÏóÖ Î≤ÑÌäº Î≥¥Ïù¥ÎèÑÎ°ù ÏÑ§Ï†ï(clientÍ∞Ä ÏïÑÎãå producerÍ∞Ä Î≤ÑÌäº ÎàåÎ†ÄÏùÑ Í≤ΩÏö∞ Í≤∞Ï†ú Îã®Í≥ÑÏóêÏÑú Íº¨Ïù¥ÎØÄÎ°ú ÏÇ¨Ï†ÑÏóê Ï∞®Îã®)